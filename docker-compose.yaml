version: "3.3"
 
services:

  whoami:
    image: traefik/whoami
    networks:
      - caddy
      
    labels:
      caddy: whoami.tsxbet.net
      caddy.reverse_proxy: "{{upstreams 80}}"
      caddy.tls: "internal"

  # games:
  #   container_name: games
  #   build:
  #       context: ./games
  #       dockerfile: ./Dockerfile
  #       target: development
  #   volumes:
  #       - ./games:/app
  #       - /app/node_modules
  #       #- /app/.next
  #   expose:
  #       - '5003'
  #   ports:
  #       - "5003:5003"
  #   working_dir: /app
  #   env_file: .env
  #   environment:
  #     - NEXT_PUBLIC_ENVIRONMENT=development
  #   networks:
  #     - caddy
      

  moodeng:
    container_name: moodeng
    build:
        context: ./moodeng
        dockerfile: ./Dockerfile
        target: development
    volumes:
        - ./moodeng:/app
        - /app/node_modules
        #- /app/.next
    expose:
        - '5002'
    ports:
        - "5002:5002"
    working_dir: /app
    env_file: .env
    environment:
      - NEXT_PUBLIC_ENVIRONMENT=development
    # labels:
    #   caddy: paribrand.shop
    #   caddy.reverse_proxy: "{{upstreams 4001}}"
    #   caddy.tls: "internal"
    # environment:
    #    - VIRTUAL_HOST=dashboard.tsxbet.com
    #    - VIRTUAL_PORT=4001
    #    - NEXT_PUBLIC_PREFIX=PKD
    networks:
      - caddy
      

  zookeep:
    container_name: zookeep
    build:
        context: ./zookeep
        dockerfile: ./Dockerfile
        target: development
    volumes:
        - ./zookeep:/app
        - /app/node_modules
        #- /app/.next
    expose:
        - '4002'
    ports:
        - "4002:4002"
    working_dir: /app
    env_file: .env
    environment:
      - NEXT_PUBLIC_ENVIRONMENT=development
    # labels:
    #   caddy: paribrand.shop
    #   caddy.reverse_proxy: "{{upstreams 4001}}"
    #   caddy.tls: "internal"
    # environment:
    #    - VIRTUAL_HOST=dashboard.tsxbet.com
    #    - VIRTUAL_PORT=4001
    #    - NEXT_PUBLIC_PREFIX=PKD
    networks:
      - caddy
      

  frontend_admin:
    container_name: frontend_admin
    build:
        context: ./frontend_admin
        dockerfile: ./Dockerfile
        target: development
    volumes:
        - ./frontend_admin:/app
        - /app/node_modules
        #- /app/.next
    expose:
        - '5001'
    ports:
        - "5001:5001"
    working_dir: /app
    env_file: .env
    # labels:
    #   caddy: admin.shop
    #   caddy.reverse_proxy: "{{upstreams 4001}}"
    #   caddy.tls: "internal"
    # environment:
    #    - VIRTUAL_HOST=admin.tsxbet.com
    #    - VIRTUAL_PORT=4001
    #    - NEXT_PUBLIC_PREFIX=PKD
    networks:
      - caddy

  reportservice:
    container_name: king_report_service
    build:
      context: ./report
      dockerfile: dev.Dockerfile
    ports:
      - "4003:8030"
    env_file: .env
    labels:
      caddy: report.tsxbet.net
      caddy.reverse_proxy: "{{upstreams 8030}}"
      caddy.tls: "internal"
    volumes:
      - ./report/:/app
    networks:
      - caddy


  backendservice:
    image: king_backend_service
    container_name: backend_service
    build:
      context: ./backend
      dockerfile: dev.Dockerfile
    ports:
      - "4006:8060"
    env_file: .env
    labels:
      caddy: staging.tsxbet.net
      caddy.reverse_proxy: "{{upstreams 8060}}"
      caddy.tls: "internal"
    volumes:
      - ./backend/:/app
    networks:
      - caddy     

  gameservice:
    #image: king_game_service                                                                                                                                        
    container_name: game_service
    build:
      context: ./gameservice
      dockerfile: dev.Dockerfile
    ports:
      - "4007:8070"
    env_file: .env
    labels:
      caddy: games.tsxbet.net
      caddy.reverse_proxy: "{{upstreams 8070}}"
      caddy.tls: "internal"
    volumes:
      - ./gameservice/:/app
    networks:
      - caddy

  # gservice:
  #   # image: gclub
  #   build:
  #     context: ./gclubservice
  #     dockerfile: Dockerfile
  #     target: base
  #   volumes:
  #     - ./gclubservice/src:/home/node/app/src
  #     - ./gclubservice/nodemon.json:/home/node/app/nodemon.json
  #   container_name: gservice
  #   expose:
  #     - '9003'
  #   ports:
  #     - '9003:9003'
  #   dns:
  #     - 8.8.8.8
  #     - 8.8.4.4
  #   command: " npm run dev"
  #   # environment:
  #   #   - VIRTUAL_HOST=gclub.tsxbet.net
  #   #   - VIRTUAL_PORT=3003
  #   env_file: .env
  #   networks:
  #     - caddy
      
  gclubservice:
    container_name: gclub_service
    build:
      context: ./gclubservice
      dockerfile: dev.Dockerfile
    ports:
      - "4005:8050"
    env_file: .env
    labels:
      caddy: gclub.tsxbet.net
      caddy.reverse_proxy: "{{upstreams 8050}}"
      caddy.tls: "internal"
    volumes:
      - ./gclubservice/:/app
    networks:
      - caddy


      
  proservice:
    #image: king_game_service                                                                                                                                        
    container_name: pro_service
    build:
      context: ./proservice
      dockerfile: dev.Dockerfile
    ports:
      - "4002:8020"
    env_file: .env
    labels:
      caddy: pro.tsxbet.net
      caddy.reverse_proxy: "{{upstreams 8020}}"
      caddy.tls: "internal"
    volumes:
      - ./proservice/:/app
    networks:
      - caddy

      

  swagger:
    image: swaggerapi/swagger-ui
    ports:
      - "8080:8080"
    environment:
      - SWAGGER_JSON=/app/docs/swagger.json  # ชี้ไปยังไฟล์ swagger.json ภายในคอนเทนเนอร์
    volumes:
      - ./backend/docs:/app/docs  # แม็พโฟลเดอร์ docs จาก host (แก้ไขเป็น path ที่ถูกต้อง)
    networks:
        - caddy
        

  https:
    image: lucaslorentz/caddy-docker-proxy:ci-alpine
    container_name: https
    ports:
      - 80:80
      - 443:443
    env_file: .env
    environment:
      - CADDY_INGRESS_NETWORKS=caddy
      - CADDY_API=0.0.0.0:2019  # เปิดใช้งาน Caddy API
      - CADDY_LOG_LEVEL=DEBUG  # ตั้งค่าระดับการบันทึก
    networks:
      - caddy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./caddy_data:/data
    restart: unless-stopped

volumes:
  caddy_data: {}

networks:
  # proxy-net:
  #     name: app-net
  #     external: true
  caddy:
      external: true